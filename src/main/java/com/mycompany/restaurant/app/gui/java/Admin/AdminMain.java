/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.restaurant.app.gui.java.Admin;

import Menu.Menu;
import PromotionPackage.Promotion;
import com.mycompany.restaurant.app.gui.java.CustomerPackage.Customer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author TUF GAMING
 */
public class AdminMain extends javax.swing.JFrame {

    /**
     * Creates new form AdminMain
     */
    Admin admin = new Admin();
    public AdminMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        try {
            admin.loadCustomer();
            admin.loadPromo();
            admin.loadMenu();
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        adminTabbedPane = new javax.swing.JTabbedPane();
        customerPanel = new javax.swing.JPanel();
        customerTypeComboBox = new javax.swing.JComboBox<>();
        customerIdTextField = new javax.swing.JTextField();
        customerNameTextField = new javax.swing.JTextField();
        memberDateTextField = new javax.swing.JTextField();
        openingBalanceTextField = new javax.swing.JTextField();
        listCustomerScrollPane = new javax.swing.JScrollPane();
        listCustomerTable = new javax.swing.JTable();
        customerTypeLabel = new javax.swing.JLabel();
        customerIdLabel = new javax.swing.JLabel();
        customerNameLabel = new javax.swing.JLabel();
        memberDateLabel = new javax.swing.JLabel();
        openingBalanceLabel = new javax.swing.JLabel();
        createCustomerButton = new javax.swing.JButton();
        deleteCustomerButton = new javax.swing.JButton();
        updateCustomerButton = new javax.swing.JButton();
        readCustomerButton = new javax.swing.JButton();
        topupBalanceLabel = new javax.swing.JLabel();
        topupBalanceTextField = new javax.swing.JTextField();
        clearCustomerTableButton = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        menuIdTextField = new javax.swing.JTextField();
        menuNameTextField = new javax.swing.JTextField();
        menuPriceTextField = new javax.swing.JTextField();
        menuIdLabel = new javax.swing.JLabel();
        menuNameLabel = new javax.swing.JLabel();
        menuPriceLabel = new javax.swing.JLabel();
        createMenuButton = new javax.swing.JButton();
        deleteMenuButton = new javax.swing.JButton();
        updateMenuButton = new javax.swing.JButton();
        readMenuButton = new javax.swing.JButton();
        listMenuScrollPane = new javax.swing.JScrollPane();
        listMenuTable = new javax.swing.JTable();
        clearListMenuButton = new javax.swing.JButton();
        promoPanel = new javax.swing.JPanel();
        promoTypeLabel = new javax.swing.JLabel();
        promoCodeLabel = new javax.swing.JLabel();
        startDateLabel = new javax.swing.JLabel();
        endDateLabel = new javax.swing.JLabel();
        percentDiscountLabel = new javax.swing.JLabel();
        maxDiscountLabel = new javax.swing.JLabel();
        minPurchaseLabel = new javax.swing.JLabel();
        minPurchaseTextField = new javax.swing.JTextField();
        maxDiscountTextField = new javax.swing.JTextField();
        percentDiscountTextField = new javax.swing.JTextField();
        endDateTextField = new javax.swing.JTextField();
        startDateTextField = new javax.swing.JTextField();
        promoCodeTextField = new javax.swing.JTextField();
        createPromoButton = new javax.swing.JButton();
        deletePromoButton = new javax.swing.JButton();
        updatePromoButton = new javax.swing.JButton();
        readPromoButton = new javax.swing.JButton();
        promoTypeComboBox = new javax.swing.JComboBox<>();
        listPromoScrollPane = new javax.swing.JScrollPane();
        listPromoTable = new javax.swing.JTable();
        clearListPromoButton = new javax.swing.JButton();
        currentOrderPanel = new javax.swing.JPanel();
        listCurrentOrderScrollPane = new javax.swing.JScrollPane();
        listCurrentOrderTable = new javax.swing.JTable();
        customerIdCurrentOrderLabel = new javax.swing.JLabel();
        menuIdCurrentOrderLabel = new javax.swing.JLabel();
        customerIdCurrentOrderTextField = new javax.swing.JTextField();
        menuIdCurrentOrderTextField = new javax.swing.JTextField();
        searchCurrentOrderButton = new javax.swing.JButton();
        printCurrentOrderButton = new javax.swing.JButton();
        historyPanel = new javax.swing.JPanel();
        customerIdHistoryLabel = new javax.swing.JLabel();
        orderNumberHistoryLabel = new javax.swing.JLabel();
        orderNumberHistoryTextField = new javax.swing.JTextField();
        customerIdHistoryTextField = new javax.swing.JTextField();
        listHistoryScrollPane = new javax.swing.JScrollPane();
        listHistoryTable = new javax.swing.JTable();
        searchHistoryButton = new javax.swing.JButton();
        printHistoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        customerTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GUEST", "MEMBER" }));
        customerTypeComboBox.setSelectedItem(null);

        listCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Type", "Customer ID", "Customer Name", "Member Date", "Opening Balance"
            }
        ));
        DefaultTableModel model = (DefaultTableModel) listCustomerTable.getModel();
        model.setRowCount(0);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        listCustomerTable.setRowSorter(sorter);
        listCustomerTable.setColumnSelectionAllowed(true);
        listCustomerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listCustomerTableMouseClicked(evt);
            }
        });
        listCustomerScrollPane.setViewportView(listCustomerTable);

        customerTypeLabel.setText("Customer Type");

        customerIdLabel.setText("Customer ID");

        customerNameLabel.setText("Customer Name");

        memberDateLabel.setText("Member Date");

        openingBalanceLabel.setText("Opening Balance");

        createCustomerButton.setText("Create");
        createCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCustomerButtonActionPerformed(evt);
            }
        });

        deleteCustomerButton.setText("Delete");
        deleteCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerButtonActionPerformed(evt);
            }
        });

        updateCustomerButton.setText("Update");
        updateCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomerButtonActionPerformed(evt);
            }
        });

        readCustomerButton.setText("Read");
        readCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readCustomerButtonActionPerformed(evt);
            }
        });

        topupBalanceLabel.setText("Topup Balance");

        topupBalanceTextField.setToolTipText("");

        clearCustomerTableButton.setText("Clear");
        clearCustomerTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCustomerTableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerPanelLayout = new javax.swing.GroupLayout(customerPanel);
        customerPanel.setLayout(customerPanelLayout);
        customerPanelLayout.setHorizontalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(createCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(updateCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(readCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(customerPanelLayout.createSequentialGroup()
                        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameLabel)
                            .addComponent(memberDateLabel)
                            .addComponent(openingBalanceLabel)
                            .addComponent(customerIdLabel)
                            .addComponent(topupBalanceLabel))
                        .addGap(18, 18, 18)
                        .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerNameTextField)
                            .addComponent(memberDateTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(openingBalanceTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(customerPanelLayout.createSequentialGroup()
                                .addComponent(topupBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerPanelLayout.createSequentialGroup()
                        .addComponent(customerTypeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(customerIdTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearCustomerTableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(listCustomerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        customerPanelLayout.setVerticalGroup(
            customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerTypeLabel))
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerIdLabel))
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerNameLabel))
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(memberDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memberDateLabel))
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openingBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openingBalanceLabel))
                .addGap(18, 18, 18)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(topupBalanceLabel)
                    .addComponent(topupBalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createCustomerButton)
                    .addComponent(deleteCustomerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(customerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCustomerButton)
                    .addComponent(readCustomerButton))
                .addGap(18, 18, 18)
                .addComponent(clearCustomerTableButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(listCustomerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        adminTabbedPane.addTab("Customer", customerPanel);

        menuIdLabel.setText("Menu ID");

        menuNameLabel.setText("Menu Name");

        menuPriceLabel.setText("Menu Price");

        createMenuButton.setText("Create");
        createMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMenuButtonActionPerformed(evt);
            }
        });

        deleteMenuButton.setText("Delete");
        deleteMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuButtonActionPerformed(evt);
            }
        });

        updateMenuButton.setText("Update");
        updateMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMenuButtonActionPerformed(evt);
            }
        });

        readMenuButton.setText("Read");
        readMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMenuButtonActionPerformed(evt);
            }
        });

        listMenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Menu ID", "Menu Name", "Menu Price"
            }
        ));
        DefaultTableModel modelMenu = (DefaultTableModel) listMenuTable.getModel();
        modelMenu.setRowCount(0);
        TableRowSorter<DefaultTableModel> sorterMenu = new TableRowSorter<>(modelMenu);
        listMenuTable.setRowSorter(sorterMenu);
        listMenuTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMenuTableMouseClicked(evt);
            }
        });
        listMenuScrollPane.setViewportView(listMenuTable);

        clearListMenuButton.setText("Clear");
        clearListMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearListMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuIdLabel)
                            .addComponent(menuNameLabel)
                            .addComponent(menuPriceLabel)
                            .addComponent(createMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(updateMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuPriceTextField)
                            .addComponent(menuNameTextField)
                            .addComponent(menuIdTextField)
                            .addComponent(deleteMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(readMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(clearListMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addComponent(listMenuScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuIdLabel))
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuNameLabel))
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menuPriceLabel))
                .addGap(31, 31, 31)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createMenuButton)
                    .addComponent(deleteMenuButton))
                .addGap(18, 18, 18)
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateMenuButton)
                    .addComponent(readMenuButton))
                .addGap(18, 18, 18)
                .addComponent(clearListMenuButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(listMenuScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        adminTabbedPane.addTab("Menu", menuPanel);

        promoTypeLabel.setText("Promo Type");

        promoCodeLabel.setText("Promo Code");

        startDateLabel.setText("Start Date");

        endDateLabel.setText("End Date");

        percentDiscountLabel.setText("Percent Discount");

        maxDiscountLabel.setText("Max Discount");

        minPurchaseLabel.setText("Minimum Purchase");

        createPromoButton.setText("Create");
        createPromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPromoButtonActionPerformed(evt);
            }
        });

        deletePromoButton.setText("Delete");
        deletePromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePromoButtonActionPerformed(evt);
            }
        });

        updatePromoButton.setText("Update");
        updatePromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePromoButtonActionPerformed(evt);
            }
        });

        readPromoButton.setText("Read");
        readPromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readPromoButtonActionPerformed(evt);
            }
        });

        promoTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DELIVERY", "DISCOUNT", "CASHBACK" }));
        promoTypeComboBox.setSelectedItem(null);

        listPromoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Code", "Start Date", "End Date", "Percent Off", "Max Discount", "Min Purchase"
            }
        ));
        DefaultTableModel modelPromo = (DefaultTableModel) listPromoTable.getModel();
        modelPromo.setRowCount(0);
        TableRowSorter<DefaultTableModel> sorterPromo = new TableRowSorter<>(modelPromo);
        listPromoTable.setRowSorter(sorterPromo);
        listPromoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPromoTableMouseClicked(evt);
            }
        });
        listPromoScrollPane.setViewportView(listPromoTable);

        clearListPromoButton.setText("Clear");
        clearListPromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearListPromoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout promoPanelLayout = new javax.swing.GroupLayout(promoPanel);
        promoPanel.setLayout(promoPanelLayout);
        promoPanelLayout.setHorizontalGroup(
            promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(promoPanelLayout.createSequentialGroup()
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(promoPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minPurchaseLabel)
                            .addComponent(maxDiscountLabel)
                            .addComponent(percentDiscountLabel)
                            .addComponent(endDateLabel)
                            .addComponent(startDateLabel)
                            .addComponent(promoCodeLabel)
                            .addComponent(promoTypeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(endDateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(percentDiscountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxDiscountTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minPurchaseTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(promoCodeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(promoTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(promoPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearListPromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(promoPanelLayout.createSequentialGroup()
                                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(updatePromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                    .addComponent(createPromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deletePromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(readPromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addGap(40, 40, 40)
                .addComponent(listPromoScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        promoPanelLayout.setVerticalGroup(
            promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(promoPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promoTypeLabel)
                    .addComponent(promoTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(promoCodeLabel)
                    .addComponent(promoCodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDateLabel)
                    .addComponent(startDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endDateLabel)
                    .addComponent(endDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentDiscountLabel)
                    .addComponent(percentDiscountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDiscountLabel)
                    .addComponent(maxDiscountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPurchaseLabel)
                    .addComponent(minPurchaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletePromoButton)
                    .addComponent(createPromoButton))
                .addGap(18, 18, 18)
                .addGroup(promoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readPromoButton)
                    .addComponent(updatePromoButton))
                .addGap(18, 18, 18)
                .addComponent(clearListPromoButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(listPromoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        adminTabbedPane.addTab("Promo", promoPanel);

        listCurrentOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Customer Type", "Customer ID", "Menu ID", "Quantity"
            }
        ));
        listCurrentOrderScrollPane.setViewportView(listCurrentOrderTable);

        customerIdCurrentOrderLabel.setText("Customer ID");

        menuIdCurrentOrderLabel.setText("Menu ID");

        searchCurrentOrderButton.setText("Search");

        printCurrentOrderButton.setText("Print");

        javax.swing.GroupLayout currentOrderPanelLayout = new javax.swing.GroupLayout(currentOrderPanel);
        currentOrderPanel.setLayout(currentOrderPanelLayout);
        currentOrderPanelLayout.setHorizontalGroup(
            currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentOrderPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(currentOrderPanelLayout.createSequentialGroup()
                        .addGroup(currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerIdCurrentOrderLabel)
                            .addComponent(menuIdCurrentOrderLabel))
                        .addGap(18, 18, 18)
                        .addGroup(currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuIdCurrentOrderTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(customerIdCurrentOrderTextField)))
                    .addComponent(searchCurrentOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printCurrentOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addComponent(listCurrentOrderScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE))
        );
        currentOrderPanelLayout.setVerticalGroup(
            currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentOrderPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIdCurrentOrderLabel)
                    .addComponent(customerIdCurrentOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(currentOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuIdCurrentOrderLabel)
                    .addComponent(menuIdCurrentOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchCurrentOrderButton)
                .addGap(18, 18, 18)
                .addComponent(printCurrentOrderButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(listCurrentOrderScrollPane)
        );

        adminTabbedPane.addTab("Current Order", currentOrderPanel);

        customerIdHistoryLabel.setText("Customer ID");

        orderNumberHistoryLabel.setText("Order Number");

        listHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order Number", "Order Date", "Customer Type", "Customer ID", "Menu ID", "Quantity", "Promo Code"
            }
        ));
        listHistoryScrollPane.setViewportView(listHistoryTable);

        searchHistoryButton.setText("Search");

        printHistoryButton.setText("Print");
        printHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printHistoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout historyPanelLayout = new javax.swing.GroupLayout(historyPanel);
        historyPanel.setLayout(historyPanelLayout);
        historyPanelLayout.setHorizontalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(historyPanelLayout.createSequentialGroup()
                        .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderNumberHistoryLabel)
                            .addComponent(customerIdHistoryLabel))
                        .addGap(18, 18, 18)
                        .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(orderNumberHistoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(customerIdHistoryTextField)))
                    .addComponent(printHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(listHistoryScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        historyPanelLayout.setVerticalGroup(
            historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historyPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderNumberHistoryLabel)
                    .addComponent(orderNumberHistoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(historyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIdHistoryLabel)
                    .addComponent(customerIdHistoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(searchHistoryButton)
                .addGap(18, 18, 18)
                .addComponent(printHistoryButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(listHistoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
        );

        adminTabbedPane.addTab("History", historyPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerButtonActionPerformed
        int selectedRow = listCustomerTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listCustomerTable.getModel();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            String customerID = (String) listCustomerTable.getValueAt(selectedRow, 1);
            model.removeRow(selectedRow);
            admin.removeCustomer(customerID);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteCustomerButtonActionPerformed

    private void printHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printHistoryButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printHistoryButtonActionPerformed

    private void createCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCustomerButtonActionPerformed
        if (customerTypeComboBox.getSelectedItem() == null || 
                customerIdTextField.getText().isEmpty() || 
                customerNameTextField.getText().isEmpty() || 
                memberDateTextField.getText().isEmpty() || 
                openingBalanceTextField.getText().isEmpty()) {
        
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        String customerType = (String) customerTypeComboBox.getSelectedItem();
        String customerId = customerIdTextField.getText();
        String customerName = customerNameTextField.getText();
        String memberDate = memberDateTextField.getText();
        String openingBalance = openingBalanceTextField.getText();
        
        if(customerType.equals("GUEST"))
            memberDate = "-";
        
        String selected = customerType + "|" + customerId + "|" + 
                customerName + "|" + memberDate + "|" + openingBalance;
        try {
            if (customerType.equals("GUEST")) {
                admin.createGuest(selected);
                JOptionPane.showMessageDialog(this, "CREATE GUEST SUCCESS: " + customerId, "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                admin.createMember(selected);
                JOptionPane.showMessageDialog(this, "CREATE MEMBER SUCCESS: " + customerId + " " + customerName, "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)listCustomerTable.getModel();
        model.addRow(new Object[]{
                customerType,
                customerId,
                customerName,
                memberDate,
                openingBalance
            });
    }//GEN-LAST:event_createCustomerButtonActionPerformed

    private void readCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readCustomerButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listCustomerTable.getModel();
        for (Customer customer : admin.getListCustomer()) {
            boolean isExist = false;
            
            for (int row = 0; row < model.getRowCount(); row++) {
                Object value = model.getValueAt(row, 1); 
                if (value != null && value.toString().equals(customer.getCustomerId())) {
                    isExist = true; 
                    break; 
                }
            }

            if (!isExist) {
                model.addRow(new Object[]{
                    customer.getCustomerType(),
                    customer.getCustomerId(),
                    customer.getFullName(),
                    customer.getMemberDate(),
                    customer.getOpeningBalance()
                });
            }
        }
    }//GEN-LAST:event_readCustomerButtonActionPerformed

    private void clearCustomerTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCustomerTableButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listCustomerTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearCustomerTableButtonActionPerformed

    private void listCustomerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listCustomerTableMouseClicked
        int selectedRow = listCustomerTable.getSelectedRow();
        customerTypeComboBox.setSelectedItem(listCustomerTable.getValueAt(selectedRow, 0));
        customerIdTextField.setText((String)listCustomerTable.getValueAt(selectedRow, 1));
        customerNameTextField.setText((String)listCustomerTable.getValueAt(selectedRow, 2));
        memberDateTextField.setText((String)listCustomerTable.getValueAt(selectedRow, 3));
        openingBalanceTextField.setText(String.valueOf(listCustomerTable.getValueAt(selectedRow, 4)));
    }//GEN-LAST:event_listCustomerTableMouseClicked

    private void updateCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomerButtonActionPerformed
        String customerType = (String) customerTypeComboBox.getSelectedItem();
        String customerId = customerIdTextField.getText();
        String customerName = customerNameTextField.getText();
        String memberDate = memberDateTextField.getText();
        String openingBalance = openingBalanceTextField.getText();
        String topupBalance = topupBalanceTextField.getText();
        
        if(customerType.equals("GUEST"))
            memberDate = "-";

        if (topupBalance.isEmpty())
            topupBalance = "0";
        
        float totalBalance = Float.parseFloat(openingBalance) + Float.parseFloat(topupBalance);
        String selected = customerType + "|" + customerId + "|" + 
                customerName + "|" + memberDate + "|" + openingBalance + "|" + topupBalance;
        
        try {
            admin.updateCustomer(selected);
            JOptionPane.showMessageDialog(this, "UPDATE CUSTOMER SUCCESS", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedRow = listCustomerTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listCustomerTable.getModel();
        model.setValueAt(customerType, selectedRow, 0);
        model.setValueAt(customerName, selectedRow, 2);
        model.setValueAt(memberDate, selectedRow, 3);
        model.setValueAt(totalBalance, selectedRow, 4);
    }//GEN-LAST:event_updateCustomerButtonActionPerformed

    private void createMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMenuButtonActionPerformed
        if ( menuIdTextField.getText().isEmpty() || 
                menuNameTextField.getText().isEmpty() || 
                menuPriceTextField.getText().isEmpty()) {
        
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        String menuId = menuIdTextField.getText();
        String menuName = menuNameTextField.getText();
        String menuPrice = menuPriceTextField.getText();
        
        String selected = menuId + "|" + menuName + "|" + 
                menuPrice;
        try {
            admin.createMenu(selected);
            JOptionPane.showMessageDialog(this, "CREATE MENU SUCCESS: " + menuId + " " + menuName, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)listMenuTable.getModel();
        model.addRow(new Object[]{
                menuId,
                menuName,
                menuPrice
            });
    }//GEN-LAST:event_createMenuButtonActionPerformed

    private void deleteMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuButtonActionPerformed
        int selectedRow = listMenuTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listMenuTable.getModel();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            String menuID = (String) listMenuTable.getValueAt(selectedRow, 0);
            model.removeRow(selectedRow);
            admin.removeMenu(menuID);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteMenuButtonActionPerformed

    private void updateMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMenuButtonActionPerformed
        String menuId = menuIdTextField.getText();
        String menuName = menuNameTextField.getText();
        String menuPrice = menuPriceTextField.getText();
        
        String selected = menuId + "|" + menuName + "|" + 
                menuPrice;
        
        try {
            admin.updateMenu(selected);
            JOptionPane.showMessageDialog(this, "UPDATE MENU SUCCESS", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedRow = listMenuTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listMenuTable.getModel();
        model.setValueAt(menuName, selectedRow, 1);
        model.setValueAt(menuPrice, selectedRow, 2);
    }//GEN-LAST:event_updateMenuButtonActionPerformed

    private void readMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMenuButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listMenuTable.getModel();
        for (Menu menu : admin.getListMenu()) {
            boolean isExist = false;
            
            for (int row = 0; row < model.getRowCount(); row++) {
                Object value = model.getValueAt(row, 0); 
                if (value != null && value.toString().equals(menu.getMenuId())) {
                    isExist = true; 
                    break; 
                }
            }

            if (!isExist) {
                model.addRow(new Object[]{
                    menu.getMenuId(),
                    menu.getMenuName(),
                    menu.getMenuPrice(),
                });
            }
        }
    }//GEN-LAST:event_readMenuButtonActionPerformed

    private void clearListMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListMenuButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listMenuTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearListMenuButtonActionPerformed

    private void listMenuTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMenuTableMouseClicked
        int selectedRow = listMenuTable.getSelectedRow();
        menuIdTextField.setText((String)listMenuTable.getValueAt(selectedRow, 0));
        menuNameTextField.setText((String)listMenuTable.getValueAt(selectedRow, 1));
        menuPriceTextField.setText(String.valueOf(listMenuTable.getValueAt(selectedRow, 2)));
    }//GEN-LAST:event_listMenuTableMouseClicked

    private void createPromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPromoButtonActionPerformed
        if ( promoTypeComboBox.getSelectedItem() == null || 
                promoCodeTextField.getText().isEmpty() || 
                startDateTextField.getText().isEmpty() ||
                endDateTextField.getText().isEmpty() ||
                percentDiscountTextField.getText().isEmpty() ||
                maxDiscountTextField.getText().isEmpty() ||
                minPurchaseTextField.getText().isEmpty()) {
        
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        String promoType = (String) promoTypeComboBox.getSelectedItem();
        String promoCode = promoCodeTextField.getText();
        String startDate = startDateTextField.getText();
        String endDate = endDateTextField.getText();
        String percentDiscount = percentDiscountTextField.getText();
        String maxDiscount = maxDiscountTextField.getText();
        String minPurchase = minPurchaseTextField.getText();
        
        String selected = promoType + "|" + promoCode + "|" + 
                startDate + "|" + endDate + "|" + percentDiscount + "|" + maxDiscount + "|" + minPurchase;
        try {
            admin.createPromo(selected);
            JOptionPane.showMessageDialog(this, "CREATE PROMO " + promoType + " SUCCESS: " + promoCode, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)listPromoTable.getModel();
        model.addRow(new Object[]{
                promoType,
                promoCode,
                startDate,
                endDate,
                percentDiscount,
                maxDiscount,
                minPurchase
            });
    }//GEN-LAST:event_createPromoButtonActionPerformed

    private void deletePromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePromoButtonActionPerformed
        int selectedRow = listPromoTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listPromoTable.getModel();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            String promoCode = (String) listPromoTable.getValueAt(selectedRow, 1);
            model.removeRow(selectedRow);
            admin.removePromo(promoCode);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deletePromoButtonActionPerformed

    private void updatePromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePromoButtonActionPerformed
        String promoType = (String) promoTypeComboBox.getSelectedItem();
        String promoCode = promoCodeTextField.getText();
        String startDate = startDateTextField.getText();
        String endDate = endDateTextField.getText();
        String percentDiscount = percentDiscountTextField.getText();
        String maxDiscount = maxDiscountTextField.getText();
        String minPurchase = minPurchaseTextField.getText();
        
        String selected = promoType + "|" + promoCode + "|" + 
                startDate + "|" + endDate + "|" + percentDiscount + "|" + maxDiscount + "|" + minPurchase;
        
        try {
            admin.updatePromo(selected);
            JOptionPane.showMessageDialog(this, "UPDATE PROMO SUCCESS", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedRow = listPromoTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listPromoTable.getModel();
        model.setValueAt(promoType, selectedRow, 0);
        model.setValueAt(startDate, selectedRow, 2);
        model.setValueAt(endDate, selectedRow, 3);
        model.setValueAt(percentDiscount, selectedRow, 4);
        model.setValueAt(maxDiscount, selectedRow, 5);
        model.setValueAt(minPurchase, selectedRow, 6);
    }//GEN-LAST:event_updatePromoButtonActionPerformed

    private void readPromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readPromoButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listPromoTable.getModel();
        for (Promotion promo : admin.getListPromo()) {
            boolean isExist = false;
            
            for (int row = 0; row < model.getRowCount(); row++) {
                Object value = model.getValueAt(row, 1); 
                if (value != null && value.toString().equals(promo.getPromoCode())) {
                    isExist = true; 
                    break; 
                }
            }

            if (!isExist) {
                model.addRow(new Object[]{
                    promo.getPromoType(),
                    promo.getPromoCode(),
                    promo.getStartDate(),
                    promo.getEndDate(),
                    promo.getPercentDiscount(),
                    promo.getMaxDiscount(),
                    promo.getMinimumPurchase()
                });
            }
        }
    }//GEN-LAST:event_readPromoButtonActionPerformed

    private void clearListPromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListPromoButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listPromoTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearListPromoButtonActionPerformed

    private void listPromoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPromoTableMouseClicked
        int selectedRow = listPromoTable.getSelectedRow();
        promoTypeComboBox.setSelectedItem(listPromoTable.getValueAt(selectedRow, 0));
        promoCodeTextField.setText((String)listPromoTable.getValueAt(selectedRow, 1));
        startDateTextField.setText((String)listPromoTable.getValueAt(selectedRow, 2));
        endDateTextField.setText((String)listPromoTable.getValueAt(selectedRow, 3));
        percentDiscountTextField.setText((String)listPromoTable.getValueAt(selectedRow, 4));
        maxDiscountTextField.setText(String.valueOf(listPromoTable.getValueAt(selectedRow, 5)));
        minPurchaseTextField.setText(String.valueOf(listPromoTable.getValueAt(selectedRow, 6)));
    }//GEN-LAST:event_listPromoTableMouseClicked

    /**
     * @param args the command line arguments
     * @throws java.lang.Exception
     */
    public static void main(String args[]) throws Exception{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AdminMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane adminTabbedPane;
    private javax.swing.JButton clearCustomerTableButton;
    private javax.swing.JButton clearListMenuButton;
    private javax.swing.JButton clearListPromoButton;
    private javax.swing.JButton createCustomerButton;
    private javax.swing.JButton createMenuButton;
    private javax.swing.JButton createPromoButton;
    private javax.swing.JPanel currentOrderPanel;
    private javax.swing.JLabel customerIdCurrentOrderLabel;
    private javax.swing.JTextField customerIdCurrentOrderTextField;
    private javax.swing.JLabel customerIdHistoryLabel;
    private javax.swing.JTextField customerIdHistoryTextField;
    private javax.swing.JLabel customerIdLabel;
    private javax.swing.JTextField customerIdTextField;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JPanel customerPanel;
    private javax.swing.JComboBox<String> customerTypeComboBox;
    private javax.swing.JLabel customerTypeLabel;
    private javax.swing.JButton deleteCustomerButton;
    private javax.swing.JButton deleteMenuButton;
    private javax.swing.JButton deletePromoButton;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JTextField endDateTextField;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JScrollPane listCurrentOrderScrollPane;
    private javax.swing.JTable listCurrentOrderTable;
    private javax.swing.JScrollPane listCustomerScrollPane;
    private javax.swing.JTable listCustomerTable;
    private javax.swing.JScrollPane listHistoryScrollPane;
    private javax.swing.JTable listHistoryTable;
    private javax.swing.JScrollPane listMenuScrollPane;
    private javax.swing.JTable listMenuTable;
    private javax.swing.JScrollPane listPromoScrollPane;
    private javax.swing.JTable listPromoTable;
    private javax.swing.JLabel maxDiscountLabel;
    private javax.swing.JTextField maxDiscountTextField;
    private javax.swing.JLabel memberDateLabel;
    private javax.swing.JTextField memberDateTextField;
    private javax.swing.JLabel menuIdCurrentOrderLabel;
    private javax.swing.JTextField menuIdCurrentOrderTextField;
    private javax.swing.JLabel menuIdLabel;
    private javax.swing.JTextField menuIdTextField;
    private javax.swing.JLabel menuNameLabel;
    private javax.swing.JTextField menuNameTextField;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JLabel menuPriceLabel;
    private javax.swing.JTextField menuPriceTextField;
    private javax.swing.JLabel minPurchaseLabel;
    private javax.swing.JTextField minPurchaseTextField;
    private javax.swing.JLabel openingBalanceLabel;
    private javax.swing.JTextField openingBalanceTextField;
    private javax.swing.JLabel orderNumberHistoryLabel;
    private javax.swing.JTextField orderNumberHistoryTextField;
    private javax.swing.JLabel percentDiscountLabel;
    private javax.swing.JTextField percentDiscountTextField;
    private javax.swing.JButton printCurrentOrderButton;
    private javax.swing.JButton printHistoryButton;
    private javax.swing.JLabel promoCodeLabel;
    private javax.swing.JTextField promoCodeTextField;
    private javax.swing.JPanel promoPanel;
    private javax.swing.JComboBox<String> promoTypeComboBox;
    private javax.swing.JLabel promoTypeLabel;
    private javax.swing.JButton readCustomerButton;
    private javax.swing.JButton readMenuButton;
    private javax.swing.JButton readPromoButton;
    private javax.swing.JButton searchCurrentOrderButton;
    private javax.swing.JButton searchHistoryButton;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JTextField startDateTextField;
    private javax.swing.JLabel topupBalanceLabel;
    private javax.swing.JTextField topupBalanceTextField;
    private javax.swing.JButton updateCustomerButton;
    private javax.swing.JButton updateMenuButton;
    private javax.swing.JButton updatePromoButton;
    // End of variables declaration//GEN-END:variables
}