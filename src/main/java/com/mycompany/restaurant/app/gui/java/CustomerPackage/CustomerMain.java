/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.restaurant.app.gui.java.CustomerPackage;

import Menu.Menu;
import OrderPackage.Order;
import OrderPackage.OrderCheckedOut;
import OrderPackage.OrderNonCheckedOut;
import OrderPackage.OrderItem;
import PromotionPackage.CashbackPromo;
import PromotionPackage.FreeShippingPromo;
import PromotionPackage.PercentOffPromo;
import PromotionPackage.Promotion;
import PromotionPackage.PromotionComparator;
import com.mycompany.restaurant.app.gui.java.Admin.AdminMain;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author TUF GAMING
 */
public class CustomerMain extends javax.swing.JFrame {

    /**
     * Creates new form CustomerMain
     */
    Order orderNonCheckedOut = new OrderNonCheckedOut();
    Order orderCheckedOut = new OrderCheckedOut();
    public CustomerMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        try {
            orderNonCheckedOut.getAdmin().loadCustomer();
            orderNonCheckedOut.getAdmin().loadPromo();
            orderNonCheckedOut.getAdmin().loadMenu();
            orderNonCheckedOut.loadCart();
            orderCheckedOut.setAdmin(orderNonCheckedOut.getAdmin());
            orderCheckedOut.setOrderList(orderNonCheckedOut.getOrderList());
            orderCheckedOut.loadHistory();
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        customerIdOrderLabel = new javax.swing.JLabel();
        menuIdLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        customerIdOrderTextField = new javax.swing.JTextField();
        menuIdTextField = new javax.swing.JTextField();
        quantityTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOrderTable = new javax.swing.JTable();
        createOrderButton = new javax.swing.JButton();
        readOrderButton = new javax.swing.JButton();
        deleteOrderButton = new javax.swing.JButton();
        updateOrderButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        clearListOrderButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        customerIdPromoLabel = new javax.swing.JLabel();
        customerIdPromoTextField = new javax.swing.JTextField();
        appliedPromoLabel = new javax.swing.JLabel();
        appliedPromoTextField = new javax.swing.JTextField();
        readPromoButton = new javax.swing.JButton();
        applyPromoButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        eligiblePromoTable = new javax.swing.JTable();
        eligiblePromoLabel = new javax.swing.JLabel();
        notEligiblePromoLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notEligiblePromoTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        customerIdPrintLabel = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        printDetailsTextArea = new javax.swing.JTextArea();
        customerIdPrintTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listMenuTable = new javax.swing.JTable();
        menuIdListLabel = new javax.swing.JLabel();
        menuNameLabel = new javax.swing.JLabel();
        menuNameTextField = new javax.swing.JTextField();
        menuIdListTextField = new javax.swing.JTextField();
        searchMenuButton = new javax.swing.JButton();
        readMenuButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        orderNumberHistoryLabel = new javax.swing.JLabel();
        customerIdHistoryLabel = new javax.swing.JLabel();
        orderNumberHistoryTextField = new javax.swing.JTextField();
        customerIdHistoryTextField = new javax.swing.JTextField();
        searchHistoryButton = new javax.swing.JButton();
        readHistoryButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        listHistoryCustomerTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        customerIdOrderLabel.setText("Customer ID");

        menuIdLabel.setText("Menu ID");

        quantityLabel.setText("Quantity");

        listOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Customer Type", "Customer ID", "Menu ID", "Quantity", "Applied Promo"
            }
        ));
        DefaultTableModel model = (DefaultTableModel) listOrderTable.getModel();
        model.setRowCount(0);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        listOrderTable.setRowSorter(sorter);
        listOrderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listOrderTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listOrderTable);

        createOrderButton.setText("CREATE");
        createOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createOrderButtonActionPerformed(evt);
            }
        });

        readOrderButton.setText("READ");
        readOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readOrderButtonActionPerformed(evt);
            }
        });

        deleteOrderButton.setText("DELETE");
        deleteOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderButtonActionPerformed(evt);
            }
        });

        updateOrderButton.setText("UPDATE");
        updateOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOrderButtonActionPerformed(evt);
            }
        });

        checkOutButton.setText("CHECKOUT");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        clearListOrderButton.setText("CLEAR");
        clearListOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearListOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerIdOrderLabel)
                            .addComponent(menuIdLabel)
                            .addComponent(quantityLabel))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(menuIdTextField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(customerIdOrderTextField)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(createOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(readOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clearListOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(checkOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIdOrderLabel)
                    .addComponent(customerIdOrderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuIdLabel)
                    .addComponent(menuIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityLabel)
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readOrderButton)
                    .addComponent(createOrderButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteOrderButton)
                    .addComponent(updateOrderButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkOutButton)
                    .addComponent(clearListOrderButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("MakeOrder", jPanel1);

        customerIdPromoLabel.setText("Customer ID");

        appliedPromoLabel.setText("Applied Promo");

        readPromoButton.setText("Read Promo");
        readPromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readPromoButtonActionPerformed(evt);
            }
        });

        applyPromoButton.setText("Apply");
        applyPromoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyPromoButtonActionPerformed(evt);
            }
        });

        eligiblePromoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Code", "Start Date", "End Date", "Percent Off", "Max Discount", "Min Purchase", "Total Discount"
            }
        ));
        jScrollPane2.setViewportView(eligiblePromoTable);

        eligiblePromoLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        eligiblePromoLabel.setText("Eligible Promo");
        eligiblePromoLabel.setMaximumSize(new java.awt.Dimension(95, 16));

        notEligiblePromoLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        notEligiblePromoLabel.setText("Not Eligible Promo");
        notEligiblePromoLabel.setMaximumSize(new java.awt.Dimension(95, 16));

        notEligiblePromoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Type", "Code", "Start Date", "End Date", "Percent Off", "Max Discount", "Min Purchase", "Total Discount"
            }
        ));
        jScrollPane3.setViewportView(notEligiblePromoTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(appliedPromoLabel)
                            .addComponent(customerIdPromoLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(customerIdPromoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .addComponent(appliedPromoTextField)))
                    .addComponent(readPromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(applyPromoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(eligiblePromoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(240, 240, 240))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(notEligiblePromoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(216, 216, 216))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerIdPromoLabel)
                            .addComponent(customerIdPromoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(appliedPromoLabel)
                            .addComponent(appliedPromoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addComponent(readPromoButton)
                        .addGap(18, 18, 18)
                        .addComponent(applyPromoButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eligiblePromoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(notEligiblePromoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Promo", jPanel2);

        customerIdPrintLabel.setText("Customer ID");

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        printDetailsTextArea.setColumns(20);
        printDetailsTextArea.setRows(5);
        jScrollPane5.setViewportView(printDetailsTextArea);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(customerIdPrintLabel)
                        .addGap(26, 26, 26)
                        .addComponent(customerIdPrintTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerIdPrintLabel)
                            .addComponent(customerIdPrintTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(printButton))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(79, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PrintDetails", jPanel3);

        listMenuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Menu ID", "Menu Name", "Menu Price"
            }
        ));
        DefaultTableModel modelListMenu = (DefaultTableModel) listMenuTable.getModel();
        modelListMenu.setRowCount(0);
        TableRowSorter<DefaultTableModel> sorterListMenu = new TableRowSorter<>(modelListMenu);
        listMenuTable.setRowSorter(sorterListMenu);
        jScrollPane4.setViewportView(listMenuTable);

        menuIdListLabel.setText("Menu ID");

        menuNameLabel.setText("Menu Name");

        searchMenuButton.setText("Search");

        readMenuButton.setText("Read Menu");
        readMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(menuNameLabel)
                            .addComponent(menuIdListLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(menuNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(menuIdListTextField)))
                    .addComponent(searchMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readMenuButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 706, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuIdListLabel)
                    .addComponent(menuIdListTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuNameLabel)
                    .addComponent(menuNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchMenuButton)
                .addGap(18, 18, 18)
                .addComponent(readMenuButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Menu", jPanel4);

        orderNumberHistoryLabel.setText("Order Number");

        customerIdHistoryLabel.setText("Customer ID");

        searchHistoryButton.setText("Search");

        readHistoryButton.setText("Read History");
        readHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readHistoryButtonActionPerformed(evt);
            }
        });

        listHistoryCustomerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Order Number", "Order Date", "Customer Type", "Customer ID", "Menu ID", "Quantity", "Promo Code"
            }
        ));
        jScrollPane6.setViewportView(listHistoryCustomerTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(orderNumberHistoryLabel)
                            .addComponent(customerIdHistoryLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(customerIdHistoryTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                            .addComponent(orderNumberHistoryTextField)))
                    .addComponent(searchHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(readHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderNumberHistoryLabel)
                    .addComponent(orderNumberHistoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIdHistoryLabel)
                    .addComponent(customerIdHistoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchHistoryButton)
                .addGap(18, 18, 18)
                .addComponent(readHistoryButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("History", jPanel5);

        jLabel1.setText("Order Number");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addContainerGap(858, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addContainerGap(383, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PrintHistory", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readOrderButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listOrderTable.getModel();
        for (Order order : orderNonCheckedOut.getOrderList()) {
            for(OrderItem item : order.getItem()){
                boolean isExist = false;
                for (int row = 0; row < model.getRowCount(); row++) {
                    Object customerIdValue = model.getValueAt(row, 1); 
                    Object menuIdValue = model.getValueAt(row, 2); 
                    if (customerIdValue != null && customerIdValue.toString().equals(order.getCustomer().getCustomerId()) &&
                        menuIdValue != null && menuIdValue.toString().equals(item.getMenu().getMenuId())) {
                        isExist = true; 
                        break;
                    }
                }
                if (!isExist) {
                    model.addRow(new Object[]{
                            order.getCustomer().getCustomerType(),
                            order.getCustomer().getCustomerId(),
                            item.getMenu().getMenuId(), 
                            item.getQuantity(), 
                            order.getAppliedPromo() != null ? order.getAppliedPromo().getPromoCode() : "-"
                        });
                }
            }
        }
    }//GEN-LAST:event_readOrderButtonActionPerformed

    private void createOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOrderButtonActionPerformed
        if (customerIdOrderTextField.getText().isEmpty() || 
                menuIdTextField.getText().isEmpty() || 
                quantityTextField.getText().isEmpty()) {
        
            JOptionPane.showMessageDialog(this, "All fields must be filled!", "Input Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }
        String customerId = customerIdOrderTextField.getText();
        String menuId = menuIdTextField.getText();
        String quantity = quantityTextField.getText();
        
        Customer customer = orderNonCheckedOut.getAdmin().getListCustomer().stream().filter(p -> p.getCustomerId().equals(customerId))
                .findFirst().orElse(new Guest(customerId));
        Menu menu = orderNonCheckedOut.getAdmin().getListMenu().stream().filter(m -> m.getMenuId().equals(menuId)).findFirst()
                        .orElse(new Menu(menuId));
        
        String selected = customerId + "|" + menuId + "|" + quantity;
        try {
            ((OrderNonCheckedOut) orderNonCheckedOut).makeOrder(selected);
            JOptionPane.showMessageDialog(this, "ADD_TO_CART SUCCESS: " + quantity + " " + menu.getMenuName() + " IS ADDED", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel)listOrderTable.getModel();
        model.addRow(new Object[]{
                customer.getCustomerType(),
                customerId,
                menuId,
                quantity
            });
    }//GEN-LAST:event_createOrderButtonActionPerformed

    private void deleteOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderButtonActionPerformed
        int selectedRow = listOrderTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listOrderTable.getModel();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            String customerID = (String) listOrderTable.getValueAt(selectedRow, 1);
            String menuID = (String) listOrderTable.getValueAt(selectedRow, 2);
            String selected = customerID + "|" + menuID;
            model.removeRow(selectedRow);
            ((OrderNonCheckedOut) orderNonCheckedOut).removeItem(selected);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteOrderButtonActionPerformed

    private void updateOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOrderButtonActionPerformed
        String customerId = customerIdOrderTextField.getText();
        String menuId = menuIdTextField.getText();
        String quantity = quantityTextField.getText();
        
        String selected = customerId + "|" + menuId + "|" + quantity;
        
        try {
            ((OrderNonCheckedOut) orderNonCheckedOut).updateItem(selected);
            JOptionPane.showMessageDialog(this, "UPDATE ITEM SUCCESS", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(AdminMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int selectedRow = listOrderTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)listOrderTable.getModel();
        model.setValueAt(quantity, selectedRow, 3);
    }//GEN-LAST:event_updateOrderButtonActionPerformed

    private void listOrderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listOrderTableMouseClicked
        int selectedRow = listOrderTable.getSelectedRow();
        customerIdOrderTextField.setText((String)listOrderTable.getValueAt(selectedRow, 1));
        menuIdTextField.setText((String)listOrderTable.getValueAt(selectedRow, 2));
        quantityTextField.setText(String.valueOf(listOrderTable.getValueAt(selectedRow, 3)));
    }//GEN-LAST:event_listOrderTableMouseClicked

    private void clearListOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearListOrderButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listOrderTable.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_clearListOrderButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        String customerId = customerIdPrintTextField.getText();
        String detailsOrder = ((OrderNonCheckedOut) orderNonCheckedOut).printDetails(customerId);
        printDetailsTextArea.setText(detailsOrder);
    }//GEN-LAST:event_printButtonActionPerformed

    private void readMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMenuButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listMenuTable.getModel();
        for (Menu menu : orderNonCheckedOut.getAdmin().getListMenu()) {
            boolean isExist = false;
            
            for (int row = 0; row < model.getRowCount(); row++) {
                Object value = model.getValueAt(row, 0); 
                if (value != null && value.toString().equals(menu.getMenuId())) {
                    isExist = true; 
                    break; 
                }
            }

            if (!isExist) {
                model.addRow(new Object[]{
                    menu.getMenuId(),
                    menu.getMenuName(),
                    menu.getMenuPrice(),
                });
            }
        }
    }//GEN-LAST:event_readMenuButtonActionPerformed

    private void readPromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readPromoButtonActionPerformed
        DefaultTableModel eligibleModel = (DefaultTableModel) eligiblePromoTable.getModel();
        eligibleModel.setRowCount(0); 

        DefaultTableModel notEligibleModel = (DefaultTableModel) notEligiblePromoTable.getModel();
        notEligibleModel.setRowCount(0);
        String customerId = customerIdPromoTextField.getText();
        Customer customer = orderNonCheckedOut.getAdmin().getListCustomer().stream().filter(p -> p.getCustomerId().equals(customerId))
                    .findFirst().orElse(new Guest(customerId));
        Order existingOrder = null;
        for (Order order : orderNonCheckedOut.getOrderList()) {
            if (order.getCustomer().equals(customer)) {
                existingOrder = order;
                break;
            }
        }

        if (existingOrder == null) {
            JOptionPane.showMessageDialog(this, "READ_PROMO FAILED: CUSTOMERS HAVE NOT ORDERED", "Success", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        List<Promotion> sortedPromotions = new ArrayList<>(orderNonCheckedOut.getAdmin().getListPromo());
        sortedPromotions.sort(new PromotionComparator(existingOrder));
        
        List<Promotion> notEligiblePromo = new ArrayList<>();
        
        for (Promotion promo : sortedPromotions) {
            if (!promo.isCustomerEligible(customer)) {
                notEligiblePromo.add(promo);
                continue;
            }
            if (promo instanceof PercentOffPromo || promo instanceof CashbackPromo) {
                if (!promo.isMinimumPriceEligible(existingOrder)) {
                    notEligiblePromo.add(promo);
                    continue;
                }
            }
            if (promo instanceof FreeShippingPromo) {
                if (!promo.isShippingFeeEligible(existingOrder)) {
                    notEligiblePromo.add(promo);
                    continue;
                }
            }
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate expiredDate = LocalDate.parse(promo.getEndDate(), formatter);
            LocalDate startDate = LocalDate.parse(promo.getStartDate(), formatter);
            if (startDate.isAfter(LocalDate.now())) {
                notEligiblePromo.add(promo);
                continue;
            }

            if (LocalDate.now().isAfter(expiredDate)) {
                notEligiblePromo.add(promo);
                continue;
            }
            
            DefaultTableModel model = (DefaultTableModel)eligiblePromoTable.getModel();
            model.addRow(new Object[]{
                    promo.getPromoType(),
                    promo.getPromoCode(),
                    promo.getStartDate(),
                    promo.getEndDate(),
                    promo.getPercentDiscount(),
                    promo.getMaxDiscount(),
                    promo.getMinimumPurchase(),
                    promo.totalDiscount(existingOrder)
                });
        }
        for (Promotion promo : notEligiblePromo) {
            DefaultTableModel model = (DefaultTableModel)notEligiblePromoTable.getModel();
            model.addRow(new Object[]{
                    promo.getPromoType(),
                    promo.getPromoCode(),
                    promo.getStartDate(),
                    promo.getEndDate(),
                    promo.getPercentDiscount(),
                    promo.getMaxDiscount(),
                    promo.getMinimumPurchase(),
                    promo.totalDiscount(existingOrder)
                });
        }
    }//GEN-LAST:event_readPromoButtonActionPerformed

    private void applyPromoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPromoButtonActionPerformed
        String customerId = customerIdPromoTextField.getText();
        String promoCode = appliedPromoTextField.getText();
        
        String selected = customerId + "|" + promoCode;
        try {
            ((OrderNonCheckedOut) orderNonCheckedOut).applyPromo(selected);
            JOptionPane.showMessageDialog(this, "APPLY_PROMO SUCCESS: " + promoCode, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(CustomerMain.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_applyPromoButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        String customerId = customerIdOrderTextField.getText();
        try {
            ((OrderCheckedOut) orderCheckedOut).checkOut(customerId);
            JOptionPane.showMessageDialog(this, "CHECK_OUT SUCCESS: " + customerId, "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(CustomerMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void readHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readHistoryButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) listHistoryCustomerTable.getModel();
        for (Order order : orderCheckedOut.getHistoryList()) {
            for(OrderItem item : order.getItem()){
                boolean isExist = false;
                for (int row = 0; row < model.getRowCount(); row++) {
                    Object orderNumber = model.getValueAt(row, 0);
                    Object customerIdValue = model.getValueAt(row, 3); 
                    Object menuIdValue = model.getValueAt(row, 4); 
                    if (customerIdValue != null && customerIdValue.toString().equals(order.getCustomer().getCustomerId()) &&
                        menuIdValue != null && menuIdValue.toString().equals(item.getMenu().getMenuId()) && 
                            orderNumber != null && Integer.parseInt(orderNumber.toString()) == order.getOrderNumber()) {
                        isExist = true; 
                        break;
                    }
                }
                if (!isExist) {
                    model.addRow(new Object[]{
                            order.getOrderNumber(),
                            order.getOrderDate(),
                            order.getCustomer().getCustomerType(),
                            order.getCustomer().getCustomerId(),
                            item.getMenu().getMenuId(),
                            item.getQuantity(), 
                            order.getAppliedPromo().getPromoCode()
                        });
                }
            }
        }
    }//GEN-LAST:event_readHistoryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appliedPromoLabel;
    private javax.swing.JTextField appliedPromoTextField;
    private javax.swing.JButton applyPromoButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JButton clearListOrderButton;
    private javax.swing.JButton createOrderButton;
    private javax.swing.JLabel customerIdHistoryLabel;
    private javax.swing.JTextField customerIdHistoryTextField;
    private javax.swing.JLabel customerIdOrderLabel;
    private javax.swing.JTextField customerIdOrderTextField;
    private javax.swing.JLabel customerIdPrintLabel;
    private javax.swing.JTextField customerIdPrintTextField;
    private javax.swing.JLabel customerIdPromoLabel;
    private javax.swing.JTextField customerIdPromoTextField;
    private javax.swing.JButton deleteOrderButton;
    private javax.swing.JLabel eligiblePromoLabel;
    private javax.swing.JTable eligiblePromoTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable listHistoryCustomerTable;
    private javax.swing.JTable listMenuTable;
    private javax.swing.JTable listOrderTable;
    private javax.swing.JLabel menuIdLabel;
    private javax.swing.JLabel menuIdListLabel;
    private javax.swing.JTextField menuIdListTextField;
    private javax.swing.JTextField menuIdTextField;
    private javax.swing.JLabel menuNameLabel;
    private javax.swing.JTextField menuNameTextField;
    private javax.swing.JLabel notEligiblePromoLabel;
    private javax.swing.JTable notEligiblePromoTable;
    private javax.swing.JLabel orderNumberHistoryLabel;
    private javax.swing.JTextField orderNumberHistoryTextField;
    private javax.swing.JButton printButton;
    private javax.swing.JTextArea printDetailsTextArea;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JButton readHistoryButton;
    private javax.swing.JButton readMenuButton;
    private javax.swing.JButton readOrderButton;
    private javax.swing.JButton readPromoButton;
    private javax.swing.JButton searchHistoryButton;
    private javax.swing.JButton searchMenuButton;
    private javax.swing.JButton updateOrderButton;
    // End of variables declaration//GEN-END:variables
}
